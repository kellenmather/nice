1. use my_first_db

2. db.createCollection("students")

3.{name: STRING, home_state: STRING, lucky_number: NUMBER, birthday: {month: NUMBER, day: NUMBER, year: NUMBER}}

4.  db.students.insert({name: "Felipe", home_state:"Pennsylvania", lucky_number:27,         birthday: {month:8, day:23, year:1978}})
    db.students.insert({name: "Ron", home_state:"Michigan", lucky_number:33, birthday: {month:10, day:17, year:1973}})
    db.students.insert({name: "Laura", home_state:"New York", lucky_number:17, birthday: {month:2, day:17, year:1963}})
    db.students.insert({name: "Angelina", home_state:"Washington", lucky_number:21, birthday: {month:2, day:20, year:1967}})
    db.students.insert({name: "Maria", home_state:"California", lucky_number:8, birthday: {month:11, day:12, year:1988}})


5. db.students.find()

6.db.students.find({$or: [{home_state:"California"}, {home_state:"Washington"}]})

7.db.students.find({lucky_number:{$gt:3}})


8. db.students.update({}, {$set: {interests: ['coding', 'brunch', 'MongoDB']}}, {multi:true})
riteResult({ "nMatched" : 5, "nUpserted" : 0, "nModified" : 5 })
 db.students.find().pretty()
 
9. (a)  db.students.update({name: "Laura"}, {$pop: {interests: "Python"}})
riteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
    (b) db.students.update({name: "Angelina"}, {$pop: {interests: "Python"}})
riteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
    (c)  db.students.update({name: "Maria"}, {$pop: {interests: "Python"}})
riteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
    (d)  db.students.update({name: "Ron"}, {$pop: {interests: "Python"}})
riteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
    (e)  db.students.update({name: "Felipe"}, {$pop: {interests: "Python"}})
riteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

10.  db.students.update({name: "Angelina"}, {$addToSet: {interests: "Taxes"}})
riteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

11.  db.students.update({name: "Angelina"}, {$pop: {interests: "Taxes"}})
riteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

12.  db.students.remove({$or: [{home_state: "California"}, {home_state: "Washington"}]})
riteResult({ "nRemoved" : 1 })

13.  db.students.remove({name: "Ron"})
riteResult({ "nRemoved" : 1 })

14.  db.students.remove({lucky_number: {$gt: 5}}, true)
riteResult({ "nRemoved" : 1 })

15. > db.students.update({}, {$set: {number_of_belts: 0}},{multi: true})
WriteResult({ "nMatched" : 2, "nUpserted" : 0, "nModified" : 2 })

16. > db.students.update({home_state: "Texas"}, {$inc: {number_of_belts: 1}}, {multi: true})
WriteResult({ "nMatched" : 2, "nUpserted" : 0, "nModified" : 2 })

17. > db.students.update({}, {$rename: {number_of_belts: "belts_earned"}}, {multi: true})
WriteResult({ "nMatched" : 2, "nUpserted" : 0, "nModified" : 2 })

18. > db.students.update({}, {$unset: {lucky_number: ""}}, {multi: true})
WriteResult({ "nMatched" : 2, "nUpserted" : 0, "nModified" : 2 })

19. > db.students.update({}, {$currentDate: {updated_on: {$type: "date"}}}, {multi: true})
WriteResult({ "nMatched" : 2, "nUpserted" : 0, "nModified" : 2 })




