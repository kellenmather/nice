Create a database called 'my_first_db'.
>use my_first_db

Create students collection.
>db.createCollection("students")

Each document you insert into this collection should have the following format: {name: STRING, home_state: STRING, lucky_number: NUMBER, birthday: {month: NUMBER, day: NUMBER, year: NUMBER}}
Create 5 students with the appropriate info.
>db.students.insert({name: "Amy", home_state: "TX", lucky_number: 12, birthday: {month: 12, day: 12, year: 1994}})
>db.students.insert({name: "Bob", home_state: "NY", lucky_number: 0, birthday: {month: 6, day: 5, year: 1984}})
>db.students.insert({name: "Alice", home_state: "CA", lucky_number: 100, birthday: {month: 2, day: 2, year: 1974}})
>db.students.insert({name: "Jane", home_state: "NJ", lucky_number: -22, birthday: {month: 7, day: 26, year: 2001}})
>db.students.insert({name: "Cake", home_state: "DE", lucky_number: 34, birthday: {month: 1, day: 10, year: 1999}})
>db.students.insert({name: "Dan", home_state: "WA", lucky_number: 10, birthday: {month: 1, day: 13, year: 1999}})
>db.students.insert({name: "Nick", home_state: "WA", lucky_number: 9, birthday: {month: 1, day: 13, year: 1999}})
>db.students.insert({name: "James", home_state: "WA", lucky_number: 5, birthday: {month: 1, day: 13, year: 1999}})


Get all students.
>db.students.find().pretty()

Retrieve all students who are from California (San Jose Dojo) or Washington (Seattle Dojo).
>db.students.find({ $or: [ { home_state: "CA" }, { home_state: "WA" } ] }).pretty()


Get all students whose lucky number is:
greater than 3
>db.students.find({lucky_number: {$gt: 3}}).pretty()

less than or equal to 10
>db.students.find({lucky_number: {$lte: 3}}).pretty()

between 1 and 9 (inclusive)
>db.students.find( { $and: [ { lucky_number: { $gte: 1 } }, { lucky_number: { $lte: 9 } } ] } ).pretty()

Add a field to each student collection called 'interests' that is an ARRAY.  It should contain the following entries: 'coding', 'brunch', 'MongoDB'. Do this in ONE operation.

>db.students.update({}, {$set: {interests: ['coding', 'brunch', 'MongoDB']}})
// The above only updated a single doc, the first one it found...

>db.students.update({},{$set: {interests: ['coding', 'brunch', 'MongoDB']}},{multi: true})

Add some unique interests for each particular students into each of their interest arrays.
>db.students.update({name: "Amy"}, {$push: {interests: 'art'}})

Add the interest 'taxes' into someone's interest array.
>db.students.update({name: "Bob"}, {$push: {interests: 'taxes'}})

Remove the 'taxes' interest you just added.
>db.students.update({name: "Bob"}, {$pop: {interests: 'taxes'}})

Remove all students who are from California (or Washington).
>db.students.remove({ $or: [ { home_state: "CA" }, { home_state: "WA" } ] })

Remove a user by name.
>db.students.remove({name: "Amy"})

Remove a student whose lucky number is greater than 5 (JUST ONE)
>db.students.remove({lucky_number: {$lt: 5}}, true)

Add a field to each student collection called 'number_of_belts' and set it to 0.
>db.students.update({},{$set: {number_of_belts: 0}},{multi: true})

>db.students.update({}, {$set: {home_state:"WA"}})

Increment this field by 1 for all students in Washington (Seattle Dojo)
>db.students.update({home_state:"WA"}, { $inc: { number_of_belts: 1 }},{multi: true})

Rename the 'number_of_belts' field to 'belts_earned'
>db.students.update({}, { $rename: { "number_of_belts": "belts_earned" }},{multi: true})

Remove the 'lucky_number' field.
>db.students.update({}, {$unset: {lucky_number: ""}}, {multi:true})

Add a 'updated_on' field, and set the value as the current date.
>db.students.update({},  { $currentDate: { updated_on: true } }, {multi:true})
